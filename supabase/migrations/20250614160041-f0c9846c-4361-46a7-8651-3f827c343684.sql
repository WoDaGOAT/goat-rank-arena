
-- Create categories table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.categories (
    id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    parent_id UUID REFERENCES public.categories(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Create category_likes table if it doesn't exist, used in UserProfilePage
CREATE TABLE IF NOT EXISTS public.category_likes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    category_id UUID NOT NULL REFERENCES public.categories(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);


-- Add unique constraints to prevent duplicate category names
DO $$
BEGIN
   IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'categories_name_parent_id_not_null_key') THEN
      CREATE UNIQUE INDEX categories_name_parent_id_not_null_key ON public.categories (name, parent_id) WHERE parent_id IS NOT NULL;
   END IF;
   IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'categories_name_parent_id_null_key') THEN
      CREATE UNIQUE INDEX categories_name_parent_id_null_key ON public.categories (name) WHERE parent_id IS NULL;
   END IF;
END
$$;

-- Add unique constraint to category_likes idempotently
DO $$
BEGIN
   IF NOT EXISTS (
       SELECT 1 FROM pg_constraint 
       WHERE conname = 'user_category_like_unique' 
       AND conrelid = 'public.category_likes'::regclass
   ) THEN
      ALTER TABLE public.category_likes ADD CONSTRAINT user_category_like_unique UNIQUE (user_id, category_id);
   END IF;
END;
$$;

-- Enable RLS and set policies for both tables
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.category_likes ENABLE ROW LEVEL SECURITY;

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Allow public read access to categories' AND schemaname = 'public' AND tablename = 'categories') THEN
        CREATE POLICY "Allow public read access to categories" ON public.categories FOR SELECT USING (true);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Allow users to read their own likes' AND schemaname = 'public' AND tablename = 'category_likes') THEN
        CREATE POLICY "Allow users to read their own likes" ON public.category_likes FOR SELECT USING (auth.uid() = user_id);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Allow users to insert their own likes' AND schemaname = 'public' AND tablename = 'category_likes') THEN
        CREATE POLICY "Allow users to insert their own likes" ON public.category_likes FOR INSERT WITH CHECK (auth.uid() = user_id);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Allow users to delete their own likes' AND schemaname = 'public' AND tablename = 'category_likes') THEN
        CREATE POLICY "Allow users to delete their own likes" ON public.category_likes FOR DELETE USING (auth.uid() = user_id);
    END IF;
END
$$;


DO $$
DECLARE
    goat_category_id UUID;
    lorem_ipsum_description TEXT := 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.';
BEGIN
    -- Upsert parent category 'GOAT' and get its ID
    INSERT INTO public.categories (name, description)
    VALUES ('GOAT', 'Greatest of All Time discussions.')
    ON CONFLICT (name) WHERE parent_id IS NULL
    DO UPDATE SET description = EXCLUDED.description
    RETURNING id INTO goat_category_id;

    -- Insert GOAT subcategories
    INSERT INTO public.categories (name, parent_id, description)
    VALUES
        ('GOAT Footballer', goat_category_id, substring(lorem_ipsum_description from 1 for 70) || '...'),
        ('GOAT Goalkeeper', goat_category_id, substring(lorem_ipsum_description from 1 for 70) || '...'),
        ('GOAT Defender', goat_category_id, substring(lorem_ipsum_description from 1 for 70) || '...'),
        ('GOAT Midfielder', goat_category_id, substring(lorem_ipsum_description from 1 for 70) || '...'),
        ('GOAT Attacker', goat_category_id, substring(lorem_ipsum_description from 1 for 70) || '...'),
        ('GOAT Free-Kick Taker', goat_category_id, substring(lorem_ipsum_description from 1 for 70) || '...'),
        ('GOAT Finisher', goat_category_id, substring(lorem_ipsum_description from 1 for 70) || '...'),
        ('GOAT Dribbler', goat_category_id, substring(lorem_ipsum_description from 1 for 70) || '...'),
        ('GOAT Playmaker', goat_category_id, substring(lorem_ipsum_description from 1 for 70) || '...'),
        ('GOAT Leader / Captain', goat_category_id, substring(lorem_ipsum_description from 1 for 70) || '...')
    ON CONFLICT (name, parent_id) WHERE parent_id IS NOT NULL DO NOTHING;

    -- Upsert other main categories so menu can be dynamic
    INSERT INTO public.categories (name, description) VALUES ('Current GOAT', 'Discussions about who is the current greatest.') ON CONFLICT (name) WHERE parent_id IS NULL DO NOTHING;
    INSERT INTO public.categories (name, description) VALUES ('GOAT of my Time', 'Discussions about the greatest player of your generation.') ON CONFLICT (name) WHERE parent_id IS NULL DO NOTHING;
    INSERT INTO public.categories (name, description) VALUES ('Competitions', 'Discussions about various competitions.') ON CONFLICT (name) WHERE parent_id IS NULL DO NOTHING;

END $$;
