
-- Create the table to store user rankings
CREATE TABLE public.user_rankings (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  category_id UUID NOT NULL REFERENCES public.categories(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  description TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Add Row Level Security (RLS) policies for user_rankings
ALTER TABLE public.user_rankings ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can create their own rankings"
  ON public.user_rankings FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Rankings are publicly visible"
  ON public.user_rankings FOR SELECT
  USING (true);

CREATE POLICY "Users can update their own rankings"
  ON public.user_rankings FOR UPDATE
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own rankings"
  ON public.user_rankings FOR DELETE
  USING (auth.uid() = user_id);

-- Create the table to store athletes within a ranking
CREATE TABLE public.ranking_athletes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ranking_id UUID NOT NULL REFERENCES public.user_rankings(id) ON DELETE CASCADE,
  athlete_id TEXT NOT NULL,
  position INT NOT NULL,
  points INT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Add Row Level Security (RLS) policies for ranking_athletes
ALTER TABLE public.ranking_athletes ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can manage athletes for their own rankings"
  ON public.ranking_athletes FOR ALL
  USING ( (SELECT user_id FROM public.user_rankings WHERE id = ranking_id) = auth.uid() )
  WITH CHECK ( (SELECT user_id FROM public.user_rankings WHERE id = ranking_id) = auth.uid() );

CREATE POLICY "Ranking athletes are publicly visible"
  ON public.ranking_athletes FOR SELECT
  USING (true);
